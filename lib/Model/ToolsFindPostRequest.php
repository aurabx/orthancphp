<?php
/**
 * ToolsFindPostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://orthanc.uclouvain.be/book/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://orthanc.uclouvain.be/book/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.12.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurabx\OrthancPHP\Model;

use \ArrayAccess;
use \Aurabx\OrthancPHP\ObjectSerializer;

/**
 * ToolsFindPostRequest Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolsFindPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_tools_find_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'caseSensitive' => 'bool',
        'expand' => 'bool',
        'full' => 'bool',
        'labels' => 'string[]',
        'labelsConstraint' => 'string',
        'level' => 'string',
        'limit' => 'float',
        'query' => 'object',
        'requestedTags' => 'string[]',
        'short' => 'bool',
        'since' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'caseSensitive' => null,
        'expand' => null,
        'full' => null,
        'labels' => null,
        'labelsConstraint' => null,
        'level' => null,
        'limit' => null,
        'query' => null,
        'requestedTags' => null,
        'short' => null,
        'since' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'caseSensitive' => false,
        'expand' => false,
        'full' => false,
        'labels' => false,
        'labelsConstraint' => false,
        'level' => false,
        'limit' => false,
        'query' => false,
        'requestedTags' => false,
        'short' => false,
        'since' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caseSensitive' => 'CaseSensitive',
        'expand' => 'Expand',
        'full' => 'Full',
        'labels' => 'Labels',
        'labelsConstraint' => 'LabelsConstraint',
        'level' => 'Level',
        'limit' => 'Limit',
        'query' => 'Query',
        'requestedTags' => 'RequestedTags',
        'short' => 'Short',
        'since' => 'Since'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caseSensitive' => 'setCaseSensitive',
        'expand' => 'setExpand',
        'full' => 'setFull',
        'labels' => 'setLabels',
        'labelsConstraint' => 'setLabelsConstraint',
        'level' => 'setLevel',
        'limit' => 'setLimit',
        'query' => 'setQuery',
        'requestedTags' => 'setRequestedTags',
        'short' => 'setShort',
        'since' => 'setSince'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caseSensitive' => 'getCaseSensitive',
        'expand' => 'getExpand',
        'full' => 'getFull',
        'labels' => 'getLabels',
        'labelsConstraint' => 'getLabelsConstraint',
        'level' => 'getLevel',
        'limit' => 'getLimit',
        'query' => 'getQuery',
        'requestedTags' => 'getRequestedTags',
        'short' => 'getShort',
        'since' => 'getSince'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('caseSensitive', $data ?? [], null);
        $this->setIfExists('expand', $data ?? [], null);
        $this->setIfExists('full', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('labelsConstraint', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('requestedTags', $data ?? [], null);
        $this->setIfExists('short', $data ?? [], null);
        $this->setIfExists('since', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets caseSensitive
     *
     * @return bool|null
     */
    public function getCaseSensitive()
    {
        return $this->container['caseSensitive'];
    }

    /**
     * Sets caseSensitive
     *
     * @param bool|null $caseSensitive Enable case-sensitive search for PN value representations (defaults to configuration option `CaseSensitivePN`)
     *
     * @return self
     */
    public function setCaseSensitive($caseSensitive)
    {
        if (is_null($caseSensitive)) {
            throw new \InvalidArgumentException('non-nullable caseSensitive cannot be null');
        }
        $this->container['caseSensitive'] = $caseSensitive;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return bool|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param bool|null $expand Also retrieve the content of the matching resources, not only their Orthanc identifiers
     *
     * @return self
     */
    public function setExpand($expand)
    {
        if (is_null($expand)) {
            throw new \InvalidArgumentException('non-nullable expand cannot be null');
        }
        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets full
     *
     * @return bool|null
     */
    public function getFull()
    {
        return $this->container['full'];
    }

    /**
     * Sets full
     *
     * @param bool|null $full If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)
     *
     * @return self
     */
    public function setFull($full)
    {
        if (is_null($full)) {
            throw new \InvalidArgumentException('non-nullable full cannot be null');
        }
        $this->container['full'] = $full;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels List of strings specifying which labels to look for in the resources (new in Orthanc 1.12.0)
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets labelsConstraint
     *
     * @return string|null
     */
    public function getLabelsConstraint()
    {
        return $this->container['labelsConstraint'];
    }

    /**
     * Sets labelsConstraint
     *
     * @param string|null $labelsConstraint Constraint on the labels, can be `All`, `Any`, or `None` (defaults to `All`, new in Orthanc 1.12.0)
     *
     * @return self
     */
    public function setLabelsConstraint($labelsConstraint)
    {
        if (is_null($labelsConstraint)) {
            throw new \InvalidArgumentException('non-nullable labelsConstraint cannot be null');
        }
        $this->container['labelsConstraint'] = $labelsConstraint;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string|null $level Level of the query (`Patient`, `Study`, `Series` or `Instance`)
     *
     * @return self
     */
    public function setLevel($level)
    {
        if (is_null($level)) {
            throw new \InvalidArgumentException('non-nullable level cannot be null');
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return float|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param float|null $limit Limit the number of reported resources
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets query
     *
     * @return object|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param object|null $query Associative array containing the filter on the values of the DICOM tags
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets requestedTags
     *
     * @return string[]|null
     */
    public function getRequestedTags()
    {
        return $this->container['requestedTags'];
    }

    /**
     * Sets requestedTags
     *
     * @param string[]|null $requestedTags A list of DICOM tags to include in the response (applicable only if \"Expand\" is set to true).  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return all Main Dicom Tags to keep backward compatibility with Orthanc prior to 1.11.0.
     *
     * @return self
     */
    public function setRequestedTags($requestedTags)
    {
        if (is_null($requestedTags)) {
            throw new \InvalidArgumentException('non-nullable requestedTags cannot be null');
        }
        $this->container['requestedTags'] = $requestedTags;

        return $this;
    }

    /**
     * Gets short
     *
     * @return bool|null
     */
    public function getShort()
    {
        return $this->container['short'];
    }

    /**
     * Sets short
     *
     * @param bool|null $short If set to `true`, report the DICOM tags in hexadecimal format
     *
     * @return self
     */
    public function setShort($short)
    {
        if (is_null($short)) {
            throw new \InvalidArgumentException('non-nullable short cannot be null');
        }
        $this->container['short'] = $short;

        return $this;
    }

    /**
     * Gets since
     *
     * @return float|null
     */
    public function getSince()
    {
        return $this->container['since'];
    }

    /**
     * Sets since
     *
     * @param float|null $since Show only the resources since the provided index (in conjunction with `Limit`)
     *
     * @return self
     */
    public function setSince($since)
    {
        if (is_null($since)) {
            throw new \InvalidArgumentException('non-nullable since cannot be null');
        }
        $this->container['since'] = $since;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


