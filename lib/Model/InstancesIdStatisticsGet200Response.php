<?php
/**
 * InstancesIdStatisticsGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://orthanc.uclouvain.be/book/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://orthanc.uclouvain.be/book/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.12.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurabx\OrthancPHP\Model;

use \ArrayAccess;
use \Aurabx\OrthancPHP\ObjectSerializer;

/**
 * InstancesIdStatisticsGet200Response Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InstancesIdStatisticsGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_instances__id__statistics_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dicomDiskSize' => 'string',
        'dicomDiskSizeMB' => 'float',
        'dicomUncompressedSize' => 'string',
        'dicomUncompressedSizeMB' => 'float',
        'diskSize' => 'string',
        'diskSizeMB' => 'float',
        'uncompressedSize' => 'string',
        'uncompressedSizeMB' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dicomDiskSize' => null,
        'dicomDiskSizeMB' => null,
        'dicomUncompressedSize' => null,
        'dicomUncompressedSizeMB' => null,
        'diskSize' => null,
        'diskSizeMB' => null,
        'uncompressedSize' => null,
        'uncompressedSizeMB' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dicomDiskSize' => false,
        'dicomDiskSizeMB' => false,
        'dicomUncompressedSize' => false,
        'dicomUncompressedSizeMB' => false,
        'diskSize' => false,
        'diskSizeMB' => false,
        'uncompressedSize' => false,
        'uncompressedSizeMB' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dicomDiskSize' => 'DicomDiskSize',
        'dicomDiskSizeMB' => 'DicomDiskSizeMB',
        'dicomUncompressedSize' => 'DicomUncompressedSize',
        'dicomUncompressedSizeMB' => 'DicomUncompressedSizeMB',
        'diskSize' => 'DiskSize',
        'diskSizeMB' => 'DiskSizeMB',
        'uncompressedSize' => 'UncompressedSize',
        'uncompressedSizeMB' => 'UncompressedSizeMB'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dicomDiskSize' => 'setDicomDiskSize',
        'dicomDiskSizeMB' => 'setDicomDiskSizeMB',
        'dicomUncompressedSize' => 'setDicomUncompressedSize',
        'dicomUncompressedSizeMB' => 'setDicomUncompressedSizeMB',
        'diskSize' => 'setDiskSize',
        'diskSizeMB' => 'setDiskSizeMB',
        'uncompressedSize' => 'setUncompressedSize',
        'uncompressedSizeMB' => 'setUncompressedSizeMB'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dicomDiskSize' => 'getDicomDiskSize',
        'dicomDiskSizeMB' => 'getDicomDiskSizeMB',
        'dicomUncompressedSize' => 'getDicomUncompressedSize',
        'dicomUncompressedSizeMB' => 'getDicomUncompressedSizeMB',
        'diskSize' => 'getDiskSize',
        'diskSizeMB' => 'getDiskSizeMB',
        'uncompressedSize' => 'getUncompressedSize',
        'uncompressedSizeMB' => 'getUncompressedSizeMB'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dicomDiskSize', $data ?? [], null);
        $this->setIfExists('dicomDiskSizeMB', $data ?? [], null);
        $this->setIfExists('dicomUncompressedSize', $data ?? [], null);
        $this->setIfExists('dicomUncompressedSizeMB', $data ?? [], null);
        $this->setIfExists('diskSize', $data ?? [], null);
        $this->setIfExists('diskSizeMB', $data ?? [], null);
        $this->setIfExists('uncompressedSize', $data ?? [], null);
        $this->setIfExists('uncompressedSizeMB', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dicomDiskSize
     *
     * @return string|null
     */
    public function getDicomDiskSize()
    {
        return $this->container['dicomDiskSize'];
    }

    /**
     * Sets dicomDiskSize
     *
     * @param string|null $dicomDiskSize Size on the disk of the DICOM instances associated with the instance, expressed in bytes
     *
     * @return self
     */
    public function setDicomDiskSize($dicomDiskSize)
    {
        if (is_null($dicomDiskSize)) {
            throw new \InvalidArgumentException('non-nullable dicomDiskSize cannot be null');
        }
        $this->container['dicomDiskSize'] = $dicomDiskSize;

        return $this;
    }

    /**
     * Gets dicomDiskSizeMB
     *
     * @return float|null
     */
    public function getDicomDiskSizeMB()
    {
        return $this->container['dicomDiskSizeMB'];
    }

    /**
     * Sets dicomDiskSizeMB
     *
     * @param float|null $dicomDiskSizeMB Size on the disk of the DICOM instances associated with the instance, expressed in megabytes (MB)
     *
     * @return self
     */
    public function setDicomDiskSizeMB($dicomDiskSizeMB)
    {
        if (is_null($dicomDiskSizeMB)) {
            throw new \InvalidArgumentException('non-nullable dicomDiskSizeMB cannot be null');
        }
        $this->container['dicomDiskSizeMB'] = $dicomDiskSizeMB;

        return $this;
    }

    /**
     * Gets dicomUncompressedSize
     *
     * @return string|null
     */
    public function getDicomUncompressedSize()
    {
        return $this->container['dicomUncompressedSize'];
    }

    /**
     * Sets dicomUncompressedSize
     *
     * @param string|null $dicomUncompressedSize Size on the disk of the uncompressed DICOM instances associated with the instance, expressed in bytes
     *
     * @return self
     */
    public function setDicomUncompressedSize($dicomUncompressedSize)
    {
        if (is_null($dicomUncompressedSize)) {
            throw new \InvalidArgumentException('non-nullable dicomUncompressedSize cannot be null');
        }
        $this->container['dicomUncompressedSize'] = $dicomUncompressedSize;

        return $this;
    }

    /**
     * Gets dicomUncompressedSizeMB
     *
     * @return float|null
     */
    public function getDicomUncompressedSizeMB()
    {
        return $this->container['dicomUncompressedSizeMB'];
    }

    /**
     * Sets dicomUncompressedSizeMB
     *
     * @param float|null $dicomUncompressedSizeMB Size on the disk of the uncompressed DICOM instances associated with the instance, expressed in megabytes (MB)
     *
     * @return self
     */
    public function setDicomUncompressedSizeMB($dicomUncompressedSizeMB)
    {
        if (is_null($dicomUncompressedSizeMB)) {
            throw new \InvalidArgumentException('non-nullable dicomUncompressedSizeMB cannot be null');
        }
        $this->container['dicomUncompressedSizeMB'] = $dicomUncompressedSizeMB;

        return $this;
    }

    /**
     * Gets diskSize
     *
     * @return string|null
     */
    public function getDiskSize()
    {
        return $this->container['diskSize'];
    }

    /**
     * Sets diskSize
     *
     * @param string|null $diskSize Size of the instance on the disk in bytes, expressed as a string for 64bit compatibility with JSON
     *
     * @return self
     */
    public function setDiskSize($diskSize)
    {
        if (is_null($diskSize)) {
            throw new \InvalidArgumentException('non-nullable diskSize cannot be null');
        }
        $this->container['diskSize'] = $diskSize;

        return $this;
    }

    /**
     * Gets diskSizeMB
     *
     * @return float|null
     */
    public function getDiskSizeMB()
    {
        return $this->container['diskSizeMB'];
    }

    /**
     * Sets diskSizeMB
     *
     * @param float|null $diskSizeMB Size of the instance on the disk, expressed in megabytes (MB)
     *
     * @return self
     */
    public function setDiskSizeMB($diskSizeMB)
    {
        if (is_null($diskSizeMB)) {
            throw new \InvalidArgumentException('non-nullable diskSizeMB cannot be null');
        }
        $this->container['diskSizeMB'] = $diskSizeMB;

        return $this;
    }

    /**
     * Gets uncompressedSize
     *
     * @return string|null
     */
    public function getUncompressedSize()
    {
        return $this->container['uncompressedSize'];
    }

    /**
     * Sets uncompressedSize
     *
     * @param string|null $uncompressedSize Size of the instance after decompression in bytes, expressed as a string for 64bit compatibility with JSON
     *
     * @return self
     */
    public function setUncompressedSize($uncompressedSize)
    {
        if (is_null($uncompressedSize)) {
            throw new \InvalidArgumentException('non-nullable uncompressedSize cannot be null');
        }
        $this->container['uncompressedSize'] = $uncompressedSize;

        return $this;
    }

    /**
     * Gets uncompressedSizeMB
     *
     * @return float|null
     */
    public function getUncompressedSizeMB()
    {
        return $this->container['uncompressedSizeMB'];
    }

    /**
     * Sets uncompressedSizeMB
     *
     * @param float|null $uncompressedSizeMB Size of the instance after decompression, expressed in megabytes (MB). This is different from `DiskSizeMB` iff `StorageCompression` is `true`.
     *
     * @return self
     */
    public function setUncompressedSizeMB($uncompressedSizeMB)
    {
        if (is_null($uncompressedSizeMB)) {
            throw new \InvalidArgumentException('non-nullable uncompressedSizeMB cannot be null');
        }
        $this->container['uncompressedSizeMB'] = $uncompressedSizeMB;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


