<?php
/**
 * StatisticsGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://orthanc.uclouvain.be/book/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://orthanc.uclouvain.be/book/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.12.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurabx\OrthancPHP\Model;

use \ArrayAccess;
use \Aurabx\OrthancPHP\ObjectSerializer;

/**
 * StatisticsGet200Response Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Aurabx\OrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatisticsGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_statistics_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countInstances' => 'float',
        'countPatients' => 'float',
        'countSeries' => 'float',
        'countStudies' => 'float',
        'totalDiskSize' => 'string',
        'totalDiskSizeMB' => 'float',
        'totalUncompressedSize' => 'string',
        'totalUncompressedSizeMB' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'countInstances' => null,
        'countPatients' => null,
        'countSeries' => null,
        'countStudies' => null,
        'totalDiskSize' => null,
        'totalDiskSizeMB' => null,
        'totalUncompressedSize' => null,
        'totalUncompressedSizeMB' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'countInstances' => false,
        'countPatients' => false,
        'countSeries' => false,
        'countStudies' => false,
        'totalDiskSize' => false,
        'totalDiskSizeMB' => false,
        'totalUncompressedSize' => false,
        'totalUncompressedSizeMB' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countInstances' => 'CountInstances',
        'countPatients' => 'CountPatients',
        'countSeries' => 'CountSeries',
        'countStudies' => 'CountStudies',
        'totalDiskSize' => 'TotalDiskSize',
        'totalDiskSizeMB' => 'TotalDiskSizeMB',
        'totalUncompressedSize' => 'TotalUncompressedSize',
        'totalUncompressedSizeMB' => 'TotalUncompressedSizeMB'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countInstances' => 'setCountInstances',
        'countPatients' => 'setCountPatients',
        'countSeries' => 'setCountSeries',
        'countStudies' => 'setCountStudies',
        'totalDiskSize' => 'setTotalDiskSize',
        'totalDiskSizeMB' => 'setTotalDiskSizeMB',
        'totalUncompressedSize' => 'setTotalUncompressedSize',
        'totalUncompressedSizeMB' => 'setTotalUncompressedSizeMB'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countInstances' => 'getCountInstances',
        'countPatients' => 'getCountPatients',
        'countSeries' => 'getCountSeries',
        'countStudies' => 'getCountStudies',
        'totalDiskSize' => 'getTotalDiskSize',
        'totalDiskSizeMB' => 'getTotalDiskSizeMB',
        'totalUncompressedSize' => 'getTotalUncompressedSize',
        'totalUncompressedSizeMB' => 'getTotalUncompressedSizeMB'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('countInstances', $data ?? [], null);
        $this->setIfExists('countPatients', $data ?? [], null);
        $this->setIfExists('countSeries', $data ?? [], null);
        $this->setIfExists('countStudies', $data ?? [], null);
        $this->setIfExists('totalDiskSize', $data ?? [], null);
        $this->setIfExists('totalDiskSizeMB', $data ?? [], null);
        $this->setIfExists('totalUncompressedSize', $data ?? [], null);
        $this->setIfExists('totalUncompressedSizeMB', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countInstances
     *
     * @return float|null
     */
    public function getCountInstances()
    {
        return $this->container['countInstances'];
    }

    /**
     * Sets countInstances
     *
     * @param float|null $countInstances Number of DICOM instances stored in Orthanc
     *
     * @return self
     */
    public function setCountInstances($countInstances)
    {
        if (is_null($countInstances)) {
            throw new \InvalidArgumentException('non-nullable countInstances cannot be null');
        }
        $this->container['countInstances'] = $countInstances;

        return $this;
    }

    /**
     * Gets countPatients
     *
     * @return float|null
     */
    public function getCountPatients()
    {
        return $this->container['countPatients'];
    }

    /**
     * Sets countPatients
     *
     * @param float|null $countPatients Number of patients stored in Orthanc
     *
     * @return self
     */
    public function setCountPatients($countPatients)
    {
        if (is_null($countPatients)) {
            throw new \InvalidArgumentException('non-nullable countPatients cannot be null');
        }
        $this->container['countPatients'] = $countPatients;

        return $this;
    }

    /**
     * Gets countSeries
     *
     * @return float|null
     */
    public function getCountSeries()
    {
        return $this->container['countSeries'];
    }

    /**
     * Sets countSeries
     *
     * @param float|null $countSeries Number of DICOM series stored in Orthanc
     *
     * @return self
     */
    public function setCountSeries($countSeries)
    {
        if (is_null($countSeries)) {
            throw new \InvalidArgumentException('non-nullable countSeries cannot be null');
        }
        $this->container['countSeries'] = $countSeries;

        return $this;
    }

    /**
     * Gets countStudies
     *
     * @return float|null
     */
    public function getCountStudies()
    {
        return $this->container['countStudies'];
    }

    /**
     * Sets countStudies
     *
     * @param float|null $countStudies Number of DICOM studies stored in Orthanc
     *
     * @return self
     */
    public function setCountStudies($countStudies)
    {
        if (is_null($countStudies)) {
            throw new \InvalidArgumentException('non-nullable countStudies cannot be null');
        }
        $this->container['countStudies'] = $countStudies;

        return $this;
    }

    /**
     * Gets totalDiskSize
     *
     * @return string|null
     */
    public function getTotalDiskSize()
    {
        return $this->container['totalDiskSize'];
    }

    /**
     * Sets totalDiskSize
     *
     * @param string|null $totalDiskSize Size of the storage area (in bytes)
     *
     * @return self
     */
    public function setTotalDiskSize($totalDiskSize)
    {
        if (is_null($totalDiskSize)) {
            throw new \InvalidArgumentException('non-nullable totalDiskSize cannot be null');
        }
        $this->container['totalDiskSize'] = $totalDiskSize;

        return $this;
    }

    /**
     * Gets totalDiskSizeMB
     *
     * @return float|null
     */
    public function getTotalDiskSizeMB()
    {
        return $this->container['totalDiskSizeMB'];
    }

    /**
     * Sets totalDiskSizeMB
     *
     * @param float|null $totalDiskSizeMB Size of the storage area (in megabytes)
     *
     * @return self
     */
    public function setTotalDiskSizeMB($totalDiskSizeMB)
    {
        if (is_null($totalDiskSizeMB)) {
            throw new \InvalidArgumentException('non-nullable totalDiskSizeMB cannot be null');
        }
        $this->container['totalDiskSizeMB'] = $totalDiskSizeMB;

        return $this;
    }

    /**
     * Gets totalUncompressedSize
     *
     * @return string|null
     */
    public function getTotalUncompressedSize()
    {
        return $this->container['totalUncompressedSize'];
    }

    /**
     * Sets totalUncompressedSize
     *
     * @param string|null $totalUncompressedSize Total size of all the files once uncompressed (in bytes). This corresponds to `TotalDiskSize` if no compression is enabled, cf. `StorageCompression` configuration option
     *
     * @return self
     */
    public function setTotalUncompressedSize($totalUncompressedSize)
    {
        if (is_null($totalUncompressedSize)) {
            throw new \InvalidArgumentException('non-nullable totalUncompressedSize cannot be null');
        }
        $this->container['totalUncompressedSize'] = $totalUncompressedSize;

        return $this;
    }

    /**
     * Gets totalUncompressedSizeMB
     *
     * @return float|null
     */
    public function getTotalUncompressedSizeMB()
    {
        return $this->container['totalUncompressedSizeMB'];
    }

    /**
     * Sets totalUncompressedSizeMB
     *
     * @param float|null $totalUncompressedSizeMB Total size of all the files once uncompressed (in megabytes)
     *
     * @return self
     */
    public function setTotalUncompressedSizeMB($totalUncompressedSizeMB)
    {
        if (is_null($totalUncompressedSizeMB)) {
            throw new \InvalidArgumentException('non-nullable totalUncompressedSizeMB cannot be null');
        }
        $this->container['totalUncompressedSizeMB'] = $totalUncompressedSizeMB;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


