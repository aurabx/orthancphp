<?php
/**
 * StudiesIdStatisticsGet200ResponseTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AurabxOrthancPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://orthanc.uclouvain.be/book/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://orthanc.uclouvain.be/book/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.12.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace AurabxOrthancPHP\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * StudiesIdStatisticsGet200ResponseTest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     AurabxOrthancPHP
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class StudiesIdStatisticsGet200ResponseTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "StudiesIdStatisticsGet200Response"
     */
    public function testStudiesIdStatisticsGet200Response()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "countInstances"
     */
    public function testPropertyCountInstances()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "countSeries"
     */
    public function testPropertyCountSeries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "dicomDiskSize"
     */
    public function testPropertyDicomDiskSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "dicomDiskSizeMB"
     */
    public function testPropertyDicomDiskSizeMB()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "dicomUncompressedSize"
     */
    public function testPropertyDicomUncompressedSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "dicomUncompressedSizeMB"
     */
    public function testPropertyDicomUncompressedSizeMB()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "diskSize"
     */
    public function testPropertyDiskSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "diskSizeMB"
     */
    public function testPropertyDiskSizeMB()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncompressedSize"
     */
    public function testPropertyUncompressedSize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncompressedSizeMB"
     */
    public function testPropertyUncompressedSizeMB()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
